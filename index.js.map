{"version":3,"sources":["src/index.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAM,OAAO,SAAP,IAAO,GAAM,EAAN;;IAEA;;;;;OACX,cACE,kBAAU;AACR,UAAK,CAAL,GAAS,wBAAT,CADQ;AAER,UAAK,GAAL,GAAW,QAAQ,GAAR,EAAX,CAFQ;;AAIR,QAAI,CAAC,OAAO,QAAP,EAAiB;AACpB,YAAM,IAAI,KAAJ,oDAA2D,MAA3D,CAAN,CADoB;KAAtB;;AAIA,UAAK,IAAL,GAAY,OAAO,QAAP,CAAgB,QAAQ,GAAR,CAAhB,IAAgC,KAAhC,CARJ;GAAV;;OAWF,OACE,YAAe;QAAd,2DAAK,oBAAS;QACL,oBADK;QACE,0BADF;QACY,sBADZ;;AAEb,0BACE,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CADF,EAEE,eAAO;AACL,UAAI,GAAJ,EAAS;AACP,iCAAI,KAAJ,CAAU,sBAAV,EAAkC,GAAlC,EADO;AAEP,eAAO,GAAG,GAAH,CAAP,CAFO;OAAT;;AAKA,+BAAI,OAAJ,CAAY,0BAAZ,EAAwC,MAAK,CAAL,CAAO,GAAP,CAAW,MAAX,CAAxC,EANK;;AAQL,SAAG,IAAH,EARK;KAAP,CAFF,CAFa;GAAf;;OAiBF,QACE,YAAe;QAAd,2DAAK,oBAAS;;;AAEb,UAAK,CAAL,CAAO,GAAP,CAAW,KAAX,EAAkB,MAAK,GAAL,CAAlB,CAFa;AAGb,kCAAI,WAAJ,EAAiB,MAAK,IAAL,CAAU,IAAV,CAAjB,CAHa;;AAKb,UAAK,CAAL,CAAO,GAAP,CAAW,MAAX,EAAoB,MAAK,IAAL,CAAU,IAAV,IAAkB,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAAtC,CAApB,CALa;;AAOb,2DAA2B,MAAK,CAAL,CAAO,GAAP,CAAW,MAAX,CAA3B,EAPa;;AASb,UAAK,CAAL,CAAO,GAAP,CAAW,MAAX,EAAmB;AACjB,eAAS,gBAAK,MAAK,GAAL,EAAU,OAAf,CAAT;KADF,EATa;;AAab,6DAA6B,MAAK,CAAL,CAAO,GAAP,CAAW,KAAX,CAA7B,EAba;AAcb,OAAG,IAAH,EAda;GAAf;;OAiBF,WACE,YAAe;QAAd,2DAAK,oBAAS;;;AAEb,kCAAI,iBAAJ,EAFa;AAGb,2BAAM,MAAK,CAAL,EAAQ,EAAd,EAHa;GAAf;;OAMF,SACE,YAAe;QAAd,2DAAK,oBAAS;;AACb,QAAM,OAAO,MAAK,CAAL,CAAO,GAAP,CAAW,MAAX,CAAP;;;AADO,SAIb,CAAK,CAAL,CAAO,GAAP,CACE,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;UACV,OAAS,MAAK,IAAL,CAAT,KADU;;;AAGlB,UAAI,IAAJ,EAAU;AACR,sCAAI,iDAAJ,EAAuD,IAAvD,EADQ;AAER,eAAO,IAAI,QAAJ,CAAa,IAAb,CAAP,CAFQ;OAAV;;AAKA,+BAAI,IAAJ,CAAS,OAAT,EAAkB,4CAAlB;;AARkB,SAUlB,CAAI,IAAJ,CAAS,uDAAT,EAVkB;KAApB,CADF,CAJa;;AAmBb,UAAK,CAAL,CAAO,MAAP,CAAc,IAAd,EAAoB,EAApB,EAnBa;GAAf;;;kBAuBW","file":"index.js","sourcesContent":["import express from 'express';\nimport { waterfall } from 'async';\nimport { join } from 'path';\nimport { mount } from 'magic-hosts';\nimport log from 'magic-server-log';\n\nconst noop = () => {};\n\nexport class Magic {\n  constructor =\n    config => {\n      this.M = express();\n      this.cwd = process.cwd();\n\n      if (!config.defaults) {\n        throw new Error(`server config.js missing config.defaults key, ${config}`);\n      }\n\n      this.conf = config.defaults[process.env] || false;\n    };\n\n  init =\n    (cb = noop) => {\n      const { spawn, autoload, listen } = this;\n      waterfall(\n        [spawn, autoload, listen],\n        err => {\n          if (err) {\n            log.error('magic startup error:', err);\n            return cb(err);\n          }\n\n          log.success('Magic listening to port:', this.M.get('port'));\n\n          cb(null);\n        }\n      );\n    };\n\n  spawn =\n    (cb = noop) => {\n    // executes before hosts\n      this.M.set('env', this.env);\n      log('conf.PORT', this.conf.PORT);\n\n      this.M.set('port', (this.conf.PORT || process.env.PORT || 5000));\n\n      log(`this.M.get(\"port\"): ${this.M.get('port')}`);\n\n      this.M.set('dirs', {\n        'hosts': join(this.cwd, 'hosts'),\n      });\n\n      log(`this.M spawned, env = ${this.M.get('env')}`);\n      cb(null);\n    };\n\n  autoload =\n    (cb = noop) => {\n      // proxies to the various hosts (vhost for now, node proxy tbd)\n      log('autoload mounts');\n      mount(this.M, cb);\n    };\n\n  listen =\n    (cb = noop) => {\n      const port = this.M.get('port');\n\n      // gets executed after all hosts executed\n      this.M.use(\n        (req, res, next) => {\n          const { host } = this.conf;\n\n          if (host) {\n            log('magic error handler redirecting to defaulthost:', host);\n            return res.redirect(host);\n          }\n\n          log.warn('magic', 'final error handler, no default host found');\n          // TODO: Render this as a global 404 error page, ugly but working\n          res.send('final error handler. this is the end of the internet.');\n        }\n      );\n\n      this.M.listen(port, cb);\n    };\n}\n\nexport default Magic;\n"]}