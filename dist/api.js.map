{"version":3,"sources":["../src/api.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAM,SAAS,sBAAf;;AAEA,IAAM,QACJ,SADI,KACJ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,EAAyB;AACvB,MAAI,GAAJ,EAAS;AACP,QAAI,MAAJ,CAAW,MAAX,CAAkB,QAAlB,GAA6B,GAA7B;AACD,GAFD,MAGK;AACH,QAAI,MAAJ,CAAW,OAAX,GAAqB,IAArB;AACD;;AAED,yBAAW,GAAX,EAAgB,GAAhB,EAAqB,IAArB;AACD,CAVH;;AAYO,IAAM,4BACX,SADW,OACX,CAAC,UAAD,EAAgB;AACd,SAAO,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CACE,UAAC,SAAD,EAAe;AACb,WAAO,IAAP,OACM,SADN,EAEE,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAAA,sBACS,GADT,CACV,IADU;AAAA,UACV,IADU,6BACH,EADG;AAAA,UACC,GADD,GACS,GADT,CACC,GADD;AAAA,kCAES,WAAW,SAAX,CAFT;AAAA,UAEV,OAFU,yBAEV,OAFU;AAAA,UAED,KAFC,yBAED,KAFC;;;AAIlB,UAAM,KAAK,IAAI,GAAJ,CAAQ,IAAR,CAAX;AACA,UAAI,CAAC,EAAD,IAAO,CAAC,4BAAW,GAAG,IAAd,CAAZ,EAAiC;AAC/B,cAAM,IAAI,KAAJ,kEACwC,EADxC,yFAAN;AAID;;AAED,UAAI,4BAAW,KAAX,CAAJ,EAAuB;AACrB,YAAI,MAAJ,CAAW,MAAX,gBACK,IAAI,MAAJ,CAAW,MADhB,EAEK,MAAM,IAAN,CAFL;AAID;;AAED,UAAI,MAAJ,gBACK,IAAI,MADT,EAEK,IAFL;AAGE,cAAM;AAHR;;AAMA,UAAM,aAAa,OAAO,MAAP,CAAc,IAAI,MAAJ,CAAW,MAAzB,EAAiC,IAAjC,CAAsC;AAAA,eAAO,GAAP;AAAA,OAAtC,CAAnB;;AAEA,UAAI,UAAJ,EAAgB;;AAEd,eAAO,MAAM,IAAN,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,CAAP;AACD;;AAED,2BACO,GADP,IACY,MADZ,KAEE,UAAC,GAAD;AAAA,eAAS,MAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,IAArB,CAAT;AAAA,OAFF;AAID,KAtCH;AAwCD,GA1CH;;AA6CA,SAAO,MAAP;AACD,CAhDI;;kBAkDQ,O","file":"api.js","sourceRoot":"./src/index.js","sourcesContent":["import { Router } from 'express'\nimport { renderPage } from './pages'\nimport { isFunction } from 'magic-types'\n\nconst router = Router()\n\nconst apiCb =\n  (err, req, res, next) => {\n    if (err) {\n      res.locals.errors.apiError = err\n    }\n    else {\n      res.locals.success = true\n    }\n\n    renderPage(req, res, next)\n  }\n\nexport const initApi =\n  (apiOptions) => {\n    Object.keys(apiOptions).forEach(\n      (routeName) => {\n        router.post(\n          `/${routeName}`,\n          (req, res, next) => {\n            const { body = {}, app } = req\n            const { handler, model } = apiOptions[routeName]\n\n            const db = app.get('db')\n            if (!db || !isFunction(db.find)) {\n              throw new Error(`\n                magic-api handler called with invalid db: ${db}\n                please use app.set('dbFile') or app.set('db')\n              `)\n            }\n\n            if (isFunction(model)) {\n              res.locals.errors = {\n                ...res.locals.errors,\n                ...model(body),\n              }\n            }\n\n            res.locals = {\n              ...res.locals,\n              ...body,\n              page: routeName,\n            }\n\n            const hasErrored = Object.values(res.locals.errors).some(err => err)\n\n            if (hasErrored) {\n              // catch request errors in the response before touching the api\n              return apiCb(null, req, res, next)\n            }\n\n            handler(\n              { ...req, db },\n              (err) => apiCb(err, req, res, next)\n            )\n          }\n        )\n      }\n    )\n\n    return router\n  }\n\nexport default initApi\n"]}