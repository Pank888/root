{"version":3,"sources":["../src/routes.js"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAM,OAAO,SAAP,IAAO,GAAM,CAAE,CAArB;;AAEA,IAAM,SAAS,sBAAf;;AAEA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAA2B;AAAA,MAAhB,IAAgB,yDAAT,IAAS;;AACzC,MAAI,MAAJ,CAAW,IAAX,GAAkB,OAAlB;AACA,uBAAW,GAAX,EAAgB,GAAhB,EAAqB,IAArB;AACD,CAHD;;AAKA,OAAO,GAAP,CAAW,QAAX;;kBAEe,M;AAER,IAAM,sCACX,SADW,YACX,CAAC,GAAD,EAAS;AACP,MAAM,SAAS,IAAI,GAAJ,CAAQ,QAAR,CAAf;;;AAGA,MAAI,MAAJ,EAAY;AACV,QAAI,4BAAW,MAAX,CAAJ,EAAwB;AACtB,aAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CACE,eAAO;AACL,YAAM,QAAQ,OAAO,GAAP,CAAd;AADK,YAEG,IAFH,GAEqC,KAFrC,CAEG,IAFH;AAAA,YAES,OAFT,GAEqC,KAFrC,CAES,OAFT;AAAA,4BAEqC,KAFrC,CAEkB,MAFlB;AAAA,YAEkB,MAFlB,iCAE2B,KAF3B;;;AAIL,YAAM,gBAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,IAAhB,CAAqB;AAAA,iBAAK,MAAM,MAAX;AAAA,SAArB,CAAtB;AACA,YAAI,CAAC,aAAL,EAAoB;AAClB,gBAAM,IAAI,KAAJ,2BAAkC,MAAlC,mBAAN;AACD;;AAED,YAAI,CAAC,0BAAS,IAAT,CAAL,EAAqB;AACnB,gBAAM,IAAI,KAAJ,wCAA+C,KAA/C,CAAN;AACD;;AAED,YAAI,CAAC,4BAAW,OAAX,CAAL,EAA0B;AACxB,gBAAM,IAAI,KAAJ,6CAAoD,KAApD,CAAN;AACD;;AAED,YAAI,MAAJ,EAAY,IAAZ,EAAkB,OAAlB;AACD,OAnBH;AAqBD,KAtBD,MAuBK,IAAI,4BAAW,MAAX,CAAJ,EAAwB;AAC3B,UAAI,GAAJ,CAAQ,MAAR;AACD;AACF;AACF,CAjCI","file":"routes.js","sourceRoot":"./src/index.js","sourcesContent":["import { Router } from 'express'\nimport { isIterable, isString, isFunction } from 'magic-types'\nimport renderPage from './pages'\n\nconst noop = () => {}\n\nconst router = Router()\n\nrouter.get('/', (req, res, next = noop) => {\n  res.locals.page = 'index'\n  renderPage(req, res, next)\n})\n\nrouter.get('/:page', renderPage)\n\nexport default router\n\nexport const customRoutes =\n  (app) => {\n    const routes = app.get('routes')\n\n    // load host specific router\n    if (routes) {\n      if (isIterable(routes)) {\n        Object.keys(routes).forEach(\n          key => {\n            const route = routes[key]\n            const { path, handler, method = 'get' } = route\n\n            const isValidMethod = ['get', 'post'].some(v => v === method)\n            if (!isValidMethod) {\n              throw new Error(`Route method of type ${method} is not valid`)\n            }\n\n            if (!isString(path)) {\n              throw new Error(`Route needs a path string to work ${route}`)\n            }\n\n            if (!isFunction(handler)) {\n              throw new Error(`Route needs a handler function to work ${route}`)\n            }\n\n            app[method](path, handler)\n          }\n        )\n      }\n      else if (isFunction(routes)) {\n        app.use(routes)\n      }\n    }\n  }\n"]}