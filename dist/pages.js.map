{"version":3,"sources":["../src/pages.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;AAEA,IAAM,UAAU,aAAhB;;AAEA,IAAM,OAAO,SAAP,IAAO,GAAM,CAAE,CAArB;;AAEO,IAAM,0CACX,SADW,cACX,CAAC,GAAD,EAAM,QAAN,EAAgC;AAAA,MAAhB,IAAgB,yDAAT,IAAS;;AAC9B,gCAAO,OAAP,6BAAsC,QAAtC;AACA,MAAI,MAAJ,CAAW,QAAX,EAAqB,UAAC,GAAD,EAAM,IAAN,EAAe;AAClC,QAAI,GAAJ,EAAS;AACP,+BAAI,KAAJ,CAAa,OAAb,8BAA6C,GAA7C;AACD;;AAED,QAAI,CAAC,IAAL,EAAW;AACT,+BAAI,KAAJ,CAAa,OAAb,2CAA0D,QAA1D;AACD;;AAED,QAAI,OAAO,CAAC,IAAZ,EAAkB;;AAEhB,aAAO,MAAP;AACD;;AAED,QAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,IAArB;AACD,GAfD;AAgBD,CAnBI;;AAqBP,IAAM,UACJ,SADI,OACJ;AAAA,MAAC,MAAD,yDAAU,EAAV;AAAA,MAAc,MAAd,yDAAuB,EAAvB;AAAA,SACE,OAAO,IAAP,IAAe,OAAO,IAAtB,IAA8B,OADhC;AAAA,CADF;;AAIA,IAAM,cACJ,SADI,WACJ,cAAoC;AAAA,yBAAjC,MAAiC;AAAA,MAAjC,MAAiC,+BAAxB,EAAwB;AAAA,2BAAjB,MAAiB;AAAA,MAAjB,MAAiB,gCAAR,EAAQ;;AAClC,MAAM,OAAO,QAAQ,MAAR,EAAgB,MAAhB,CAAb;AACA,MAAI,WAAW,QAAf;;AAEA,MAAI,UAAU,OAAO,GAArB,EAA0B;AACxB,gBAAY,OAAO,GAAP,GAAa,GAAzB;AACD;;AAED,cAAY,IAAZ;;AAEA,gCAAO,OAAP,yBAAkC,IAAlC,uBAAwD,QAAxD;;AAEA,SAAO;AACL,cADK;AAEL;AAFK,GAAP;AAID,CAjBH;;AAmBO,IAAM,kCACX,SADW,UACX,CAAC,GAAD,EAAM,GAAN,EAA2B;AAAA,MAAhB,IAAgB,yDAAT,IAAS;;AAAA,qBACE,YAAY,GAAZ,EAAiB,GAAjB,CADF;;AAAA,MACjB,IADiB,gBACjB,IADiB;AAAA,MACX,QADW,gBACX,QADW;;;AAGzB,MAAI,MAAJ,gBACK,IAAI,MADT;AAEE,cAFF;AAGE;AAHF;;AAMA,gCAAI,eAAJ,EAAqB,IAArB,EAA2B,eAA3B,EAA4C,QAA5C;;AAEA,SAAO,eAAe,GAAf,EAAoB,QAApB,EAA8B,IAA9B,CAAP;AACD,CAbI;;kBAeQ,U","file":"pages.js","sourceRoot":"./src/index.js","sourcesContent":["import log from 'magic-server-log'\n\nconst libName = 'magic-pages'\n\nconst noop = () => {}\n\nexport const renderTemplate =\n  (res, template, next = noop) => {\n    log(`${libName}: rendering template ${template}`)\n    res.render(template, (err, html) => {\n      if (err) {\n        log.error(`${libName}: error in res.render ${err}`)\n      }\n\n      if (!html) {\n        log.error(`${libName}: html file was empty for template ${template}`)\n      }\n\n      if (err || !html) {\n        // 404, no error passing, next will handle it!\n        return next()\n      }\n\n      res.status(200).send(html)\n    })\n  }\n\nconst getPage =\n  (params = {}, locals = {}) =>\n    locals.page || params.page || 'index'\n\nconst getTemplate =\n  ({ params = {}}, { locals = {}}) => {\n    const page = getPage(params, locals)\n    let template = 'pages/'\n\n    if (params && params.dir) {\n      template += params.dir + '/'\n    }\n\n    template += page\n\n    log(`${libName} Rendering Page: ${page} with template ${template}`)\n\n    return {\n      page,\n      template,\n    }\n  }\n\nexport const renderPage =\n  (req, res, next = noop) => {\n    const { page, template } = getTemplate(req, res)\n\n    res.locals = {\n      ...res.locals,\n      page,\n      template,\n    }\n\n    log('render page: ', page, 'with template', template)\n\n    return renderTemplate(res, template, next)\n  }\n\nexport default renderPage\n"]}